# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - INHEART-275

pool:
  vmImage: ubuntu-latest

steps:
  - task: replacetokens@5
    inputs:
      targetFiles: '**/*.env.prod'
      encoding: 'auto'
      tokenPattern: 'default'
      writeBOM: true
      actionOnMissing: 'warn'
      keepToken: false
      actionOnNoFiles: 'continue'
      enableTransforms: false
      enableRecursion: false
      useLegacyPattern: false
      enableTelemetry: true
  - task: CmdLine@2
    inputs:
      script: 'mv .env.prod .env'

  - task: NodeTool@0
    inputs:
      versionSpec: '18.x'
    displayName: 'Install Node engine'

  - script: |
      npm install --global yarn
    displayName: 'Install yarn'

  - script: |
      echo "Starting build proccess..."
      yarn install
    displayName: 'Install dependencies'

  - script: |
      echo "Building application..."
      yarn nx build backend --prod
    displayName: 'Build application'

  - script: |
      rm -rf ./apps
      rm -rf ./libs
      rm -rf ./scripts
      rm -rf ./docker
      rm -rf ./apps
      rm -rf ./tools
      rm -rf ./.github
      rm -rf ./.git
      rm -rf ./.husky
      rm -rf ./.vscode
      rm -rf ./.storybook
      rm -rf ./yarn.lock
      rm -rf ./tsconfig.base.json
      rm -rf ./react-native.config.js
      rm -rf ./package.json
      rm -rf ./nx.json
      rm -rf ./jest.preset.js
      rm -rf ./jest.config.ts
      rm -rf ./Gemfile
      rm -rf ./docker-compose.yml
      rm -rf ./babel.config.json
      rm -rf ./azure-pipelines.yml
      rm -rf ./.ruby-version
      rm -rf ./.prettierrc
      rm -rf ./.prettierignore
      rm -rf ./.lintstagedrc.js
      rm -rf ./.gitignore
      rm -rf ./.eslintrc.json
      rm -rf ./.env.dev
      rm -rf ./.editorconfig
      rm -rf ./.commitlintrc.js
    displayName: 'Delete unnecessary items'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
      includeRootFolder: false
      archiveType: zip
      archiveFile: '$(Build.ArtifactStagingDirectory)/artifact.zip'
      replaceExistingArchive: true
    displayName: 'Archive Application'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    displayName: 'Publish Artifacts'
